name: 🚀 Release

permissions:
  contents: write
  actions: write
  attestations: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.5.0)'
        required: true
        type: string

jobs:
  validate-inputs:
    name: 🔍 Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
      - name: 🔍 Validate version format
        id: validate
        run: |
          version="${{ github.event.inputs.version }}"
          
          # Check if version starts with 'v' and follows semantic versioning
          if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Version must follow semantic versioning format (e.g., v1.5.0)"
            exit 1
          fi
          
          echo "✅ Version format is valid: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

  discover-backends:
    name: 🔍 Discover Backends
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      backends: ${{ steps.discover.outputs.backends }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Discover backends
        id: discover
        run: |
          # Find all backend directories that have go.mod files
          backends=$(find backend -mindepth 1 -maxdepth 1 -type d | sort)
          
          # Filter to only include directories with go.mod files
          backend_list=()
          for backend in $backends; do
            if [[ -f "$backend/go.mod" ]]; then
              backend_name=$(basename "$backend")
              backend_list+=("$backend_name")
              echo "✅ Found backend: $backend_name"
            fi
          done
          
          # Convert to JSON array
          backends_json=$(printf '%s\n' "${backend_list[@]}" | jq -R . | jq -s . | jq -c .)
          echo "backends=$backends_json" >> $GITHUB_OUTPUT
          echo "📦 Discovered backends: $backends_json"

  create-tags:
    name: 🏷️ Create and Push Tags
    runs-on: ubuntu-latest
    needs: [validate-inputs, discover-backends]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create main project tag
        run: |
          version="${{ needs.validate-inputs.outputs.version }}"
          
          # Check if tag already exists
          if git tag -l | grep -q "^${version}$"; then
            echo "⚠️ Tag $version already exists for main project"
          else
            git tag "$version"
            echo "✅ Created main project tag: $version"
          fi

      - name: 🏷️ Create backend tags
        run: |
          version="${{ needs.validate-inputs.outputs.version }}"
          backends='${{ needs.discover-backends.outputs.backends }}'
          
          echo "Creating backend tags for version: $version"
          
          # Parse backends JSON array
          echo "$backends" | jq -r '.[]' | while read -r backend; do
            backend_tag="backend/${backend}/${version}"
            
            # Check if tag already exists
            if git tag -l | grep -q "^${backend_tag}$"; then
              echo "⚠️ Tag $backend_tag already exists"
            else
              git tag "$backend_tag"
              echo "✅ Created backend tag: $backend_tag"
            fi
          done

      - name: 🚀 Push all tags
        run: |
          version="${{ needs.validate-inputs.outputs.version }}"
          
          echo "Pushing main project tag..."
          git push origin "$version" || echo "⚠️ Main project tag $version may already exist remotely"
          
          echo "Pushing backend tags..."
          backends='${{ needs.discover-backends.outputs.backends }}'
          echo "$backends" | jq -r '.[]' | while read -r backend; do
            backend_tag="backend/${backend}/${version}"
            git push origin "$backend_tag" || echo "⚠️ Backend tag $backend_tag may already exist remotely"
            echo "📤 Pushed: $backend_tag"
          done
          
          echo "🎉 All tags pushed successfully!"

  deploy-docs:
    name: 📚🚀 Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-tags]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd website
          npm ci

      - name: 📚 Create versioned documentation
        run: |
          cd website
          version="${{ needs.validate-inputs.outputs.version }}"
          # Remove 'v' prefix for Docusaurus version
          doc_version=${version#v}
          
          echo "Creating versioned documentation for version: $doc_version"
          
          # Check if this version already exists
          if [[ -f versions.json ]] && jq -e ". | index(\"$doc_version\")" versions.json > /dev/null; then
            echo "ℹ️ Version $doc_version already exists, skipping versioning"
          else
            # Use Docusaurus versioning command to create the version
            npm run version "$doc_version"
            echo "✅ Created version $doc_version using Docusaurus versioning"
          fi
          
          # Show current versions
          if [[ -f versions.json ]]; then
            echo "📋 Current versions:"
            cat versions.json
          fi

      - name: 📝 Update Docusaurus current version label
        run: |
          cd website
          version="${{ needs.validate-inputs.outputs.version }}"
          doc_version=${version#v}
          # Remplace la valeur de lastVersion dans docusaurus.config.ts
          sed -i.bak -E "s/(lastVersion:\s*')[^']+(',)/\1${doc_version}\2/" docusaurus.config.ts
          rm docusaurus.config.ts.bak

      - name: 🏗️ Build website
        run: |
          cd website
          npm run build

      - name: 🗂️ Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: website/build

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📚 Commit documentation version
        run: |
          cd website
          version="${{ needs.validate-inputs.outputs.version }}"
          doc_version=${version#v}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/${doc_version} versions.json
          git commit -m "docs: add documentation for version ${doc_version}" || echo "No changes to commit"
          git push origin main