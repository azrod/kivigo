name: Go Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  workflow_call:

jobs:
  # Test main package (always runs)
  test-main:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🗄️ Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-main-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-main-
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📦 Install dependencies
        run: go mod download

      - name: 🧪 Run main package tests with coverage
        run: go test -v -timeout=300s -coverprofile=coverage-main.out ./pkg/...

      - name: 📤 Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        if: matrix.go-version == '1.24'  # Only upload coverage once
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage-main.out
          parallel: true
          flag-name: main

  # Complete coverage reporting
  finish:
    if: github.actor != 'dependabot[bot]' && !cancelled() && needs.test-main.result == 'success'
    needs: [test-main]
    runs-on: ubuntu-latest
    steps:
      - name: 🏁 Notify Coveralls of parallel build completion
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  # Generate test summary for PR
  test-summary:
    if: github.actor != 'dependabot[bot]' && always()
    runs-on: ubuntu-latest
    needs: [test-main]
    steps:
      - name: 📊 Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Main Package" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-main.result }}" = "success" ]; then
            echo "✅ Main package tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-main.result }}" = "failure" ]; then
            echo "❌ Main package tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏸️ Main package tests skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-main.result }}" = "success" ]; then
            echo "📊 **Coverage Report**: Check [Coveralls](https://coveralls.io/github/kivigo/kivigo) for detailed coverage information" >> $GITHUB_STEP_SUMMARY
          fi